{
  "protocolModule": {
    "protocol": "MQTT",
    "encoding": "utf-8",
    "payload": "json"
  },


  "generators": [
    { "id": "g_rand_uniform" },
    { "id": "g_rand_uniform_2" },
    { "id": "g_with_seed", "seed": 123 } ],


  "mutators": [
    { "id": "m_xor_protoname_fixed", "field": "protoname", "binary": "XOR", "hex": "0xA5A5" },
    { "id": "m_inc_protolevel", "field": "protolevel", "unary": "INCR" },
    { "id": "m_inc_clientid_len", "field": "clientIdlen", "unary": "INCR" },
    { "id": "m_xor_payload", "field": "value.field_name", "binary": "XOR", "generator": "g_rand_uniform" },
    { "id": "m_replace_clientid", "field": "clientId",  "binary": "SET", "generator": "g_with_seed" },
    { "id": "m_replace_username", "field": "username",  "binary": "SET", "generator": "g_rand_uniform_2" },
    { "id": "m_invert_username_flag", "field": "usernameflag", "unary": "NOT" },
    { "id": "m_invert_flags_dup", "field": "DUP", "unary": "NOT" },
    { "id": "m_invert_flags_qos", "field": "QOS", "unary": "NOT" }
  ],


  "filters": [
    {
      "id": "f_all_connect",
      "description": "This filter matches all connect packets",
      "direction": "Request",
      "filter": { "field": "type", "op": "-eq", "value": 1 }
    }, {
      "id": "f_publish_qos_lt2_or_subscribe",
      "description": "Complex filter matches conditionally publish or subscribe packets",
      "direction": "Request",
      "left": {
        "left": { "filter": { "field": "type", "op": "-eq", "value": 3 } },
        "op": "AND",
        "right": { "filter": { "field": "QOS", "op": "-lt", "value": 2 } } },
      "op": "OR",
      "right": { "filter": { "field": "type", "op": "-eq", "value": 8 } }
    }, {
      "id": "f_publish_qos_2",
      "description": "Matches publish packets and all packets having QoS == 2",
      "direction": "Request",
      "left": { "filter": { "field": "type", "op": "-eq", "value": 3 } },
      "op": "AND",
      "right": { "filter": { "field": "QOS", "op": "-eq", "value": 2 } }
    } ],


  "rules": [
    {
      "match": "f_all_connect",
      "distribution": {
        "model": "multinomial",
        "seed": 3456,
        "nxp": 10,
        "items": [
          { "strength": 1, "mutators": [ "m_xor_protoname_fixed", "m_inc_protolevel" ] },
          { "strength": 12, "mutators": [ "m_replace_username", "m_invert_username_flag" ] },
          { "strength": 15, "mutators": [ "m_inc_clientid_len", "m_replace_clientid" ] },
          { "strength": 7, "mutators": [ "m_invert_flags_dup", "m_invert_flags_qos" ] },
          { "strength": 15, "mutators": [ ] }
        ] }
    }, {
      "match": "f_publish_qos_lt2_or_subscribe",
      "mutators": [ "m_invert_flags_qos" ]
    }, {
      "match": "f_publish_qos_2",
      "mutators": [ "m_invert_flags_dup", "m_xor_payload" ]
    } ]
}
